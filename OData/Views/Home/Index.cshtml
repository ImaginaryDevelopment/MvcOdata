@model Contracts.Universe
@{
    ViewBag.Title = "Index";
    var shownOrderedProperties = ViewData.ModelMetadata.Properties.OrderBy(a => a.PropertyName).ToArray();
    Func<ModelMetadata, bool> isDateRange = m => m.ModelType.Name == "DateRange";//typeof(DateRange) || m.TemplateHint ==  MVC.Shared.Views.EditorTemplates.DateTimeRange;
}
@helper KoIfDateRange(string s)
{
    const string ifBase = "if(self.{0}{1} && self.{0}{1}() && self.{0}{1}()!==''){{filters.push(\"{0} {2} {3}\"+ self.{0}{1}() + \"{4}\");}}";
    const string surround = "'";
    var prefix = "datetime" + surround;
    @Html.Raw(string.Format(ifBase, s, ".StartDate", "ge", prefix, surround) + Environment.NewLine)
    @Html.Raw(string.Format(ifBase, s, ".EndDate", "lt", prefix, surround) + Environment.NewLine)
}
<h2>Ko ftw!</h2>
<div data-bind="visible:hasError,text:message" class="error"></div>
<div>Search Grid
    @foreach (var m in ViewData.ModelMetadata.Properties)
    {
     @m.PropertyName <input data-bind="value:@m.PropertyName"/>   
    }
    HtmlMap search type <select name="HtmlMapSearchType" data-bind="options:searchOptions,optionsText:'text',optionsValue:'value',value:htmlMapSearchType"></select>
</div>
<div data-bind="koGrid: gridOptions" style="min-height: 200px"></div>
<a href="#" data-bind="click:fetch">Fetch</a>
<div>Message:<span data-bind="text:message"></span></div>
<div>UseJson? <input type="checkbox" data-bind="checked:makeLinkJson"/></div>
<div> urls:
Odata Url:<a href="#" data-bind="attr:{href:OdataUrl},text:OdataUrl"></a>
WCF Data services Url:<a href="#" data-bind="attr:{href:WcfDataUrl},text:WcfDataUrl"></a>
</div>
<div data-bind="text:errorDetail"></div>
<div>
    Raw Items (no kogrid)
    <div data-bind="foreach: items">
        <div>
            <span data-bind="text: JSON.stringify($data)">:</span><span data-bind="text: $data"></span>
        </div>
    </div>
</div>
@section scripts
{
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout/2.2.1/knockout-min.js"></script>
    <script src="~/Scripts/koGrid-2.1.1.debug.js"></script>
    <script src="~/Scripts/KoExtensions.js"></script>
    <script id="odataoverrides">
        window.filterOverride = {};
        window.filterOverride.HtmlMap = function(self,filters,buildFilter) {
            if (!self.HtmlMap())
                return;
            var newFilter;
            switch(self.htmlMapSearchType()) {
                case 'indexof':
                    newFilter = self.htmlMapSearchType() + '(HtmlMap,\'' + self.HtmlMap() + '\') ge 0';
                    filters.push(newFilter);
                    break;
                case 'substringof':
                    newFilter =self.htmlMapSearchType() + '(\'' + self.HtmlMap() + '\',HtmlMap) eq true';
                    filters.push(newFilter);
                    //buildFilter('HtmlMap', 'substringof', '', "'");
                break;
            default :
                buildFilter('HtmlMap', 'eq', '', "'");
            }
            
        };
    </script>
    <script>
        var url = "/OData/Universes";
        var ViewModel = function (url) {
            var ko = window.ko;
            var self = this;
            self.makeLinkJson = ko.observable(false);
            self.hasError = ko.observable(false);
            self.errorDetail = ko.observable();
            self.totalServerItems = ko.observable();
            self.defaultUri = url+'?';
            self.message = ko.observable('KO initialized');
            self.items = ko.observableArray();
            self.initialized = false;
            self.pagesize = ko.observable(10);
            self.page = ko.observable(1);
            self.sortField = ko.observable('');
            self.descending = ko.observable(false);
            self.sortText = ko.computed(function () {
                if (self.descending()) {
                    return 'Z..A';
                }
                return 'A..Z';
            });
            @foreach (var p in shownOrderedProperties)
             {
                 @: self['@p.PropertyName'] = ko.observable();
             }
            self.searchOptions = ko.observableArray([
                
                {text: 'exact match',value:'eq'},
                {text: 'indexof contains',value:'indexof'},
                {text:'contains',value:'substringof'}
            ]);
            self.htmlMapSearchType = ko.observable('eq');
            self.filter = ko.computed(function () {
                var filter = '';
                var filters = [];
                var addFilter = '&$filter=';
                                                            @* ReSharper disable UnusedLocals *@
                var buildFilter = function (name,operator, prefix, surround) {
                                                            @* ReSharper restore UnusedLocals *@
                    if (self[name] && self[name]()) {
                    
                        var newFilter = name + ' ' + operator + ' ';
                        if (self[name]() === -1 || self[name]()==="-1") {
                            if (operator !== "eq")
                                console.warn('null comparison on != eq');
                            newFilter+= 'null';
                        } else {
                            newFilter+=prefix + surround + self[name]() + surround;
                        }
                    
                        filters.push(newFilter);
                    }
                };
                @foreach (var p in shownOrderedProperties)
            {
                var n = p.PropertyName;
                @: if(window.filterOverride && window.filterOverride.@n){
                                                                    @: window.filterOverride.@(n)(self,filters,buildFilter);
                                                @: } else {
                if (isDateRange(p))
                                                    {// @: is needed for indentation preservation
            @: @(KoIfDateRange(n))
                    }
                                                    else
                                                    {// @: is needed for indentation preservation
                    @: buildFilter('@(n)','eq','@(p.ModelType == typeof(DateTime) || p.ModelType == typeof(DateTime?) ? "datetime" : string.Empty)' ,"@Html.Raw(p.ModelType.IsValueType ? string.Empty : "'")");                                                
                                                                 }
                 @:}
            }
                if (filters.length > 0)
                    filter = addFilter + filters.join(" and ");
                return filter;
            });
            self.ordering = ko.computed(function () {
                var order = '';
                var orderPrefix = "&$orderby=";
                
                if (self.sortField() && self.sortField() !== '') {
                    order += orderPrefix + self.sortField();
                    if (self.descending())
                        order += " desc";
                }
                return order;
            });
            self.sortField.beforeAndAfterSubscribe(function(oldvalue, newvalue) {
                if (oldvalue != newvalue)
                    self.fetch();
            });
            self.paging = ko.computed(function () {
                var pagingQuery = "&$top=" + self.pagesize();

                if (self.page() > 1)
                    pagingQuery += "&$skip=" + ((self.page() - 1) * self.pagesize());
                pagingQuery+="&$inlinecount=allpages";
                return pagingQuery;
            });
            self.queryUrl = ko.computed(function() {
                var query= self.filter() + self.ordering() + self.paging();
               
                
                return query;
            });
            
            self.uri = ko.computed(function () {
                var base = self.defaultUri;
                if (self.makeLinkJson())
                    base += '&json=true';

                return base + self.queryUrl();
            });
            self.OdataUrl = ko.computed(function() {
                 
               
                return 'http://localhost:3875' + self.uri();

            });
            self.WcfDataUrl = ko.computed(function() {
                
                var query = 'http://localhost:4339/starfleetcommanderservice.svc/Universes?' + self.queryUrl();
                if (self.makeLinkJson())
                    query += "&$format=json";
                return query;
            });
            self.pagingOptions = {
                currentPage: self.page,                 
                pageSize:self.pagesize,
                pageSizes: ko.observableArray([10,2,25]),
                totalServerItems: self.totalServerItems
            };
            self.gridOptions = {
                data: self.items,
                enablePaging:true,
                pagingOptions:self.pagingOptions,
                afterSelectionChange: function(){}   
            };
            self.fetch = function() {
                $.ajax(self.uri()).success(function (d) {
                    self.hasError(false);
                    self.message('fetched');
                    self.items.removeAll();
                    self.items(d.value);
                    self.totalServerItems(d.count);
                    if (!self.initialized) {
                        self.initialized = true;
                        self.message("initialized");
                        window.ko.applyBindings(komodel);
                        self.message("ko bound");
                    }
                    
                }).error(function(error,status,jqXhr) {
                    self.message('query failed:' + status); //":"+JSON.stringify(error));
                    self.hasError(true);
                });
            };
            self.fetch();
        };
        var komodel = new ViewModel(url);
        //window.ko.applyBindings(komodel);
    </script>
   
}
