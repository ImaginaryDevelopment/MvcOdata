@{
    var shownOrderedProperties = ViewData.ModelMetadata.Properties.OrderBy(a => a.PropertyName).ToArray();
    Func<ModelMetadata, bool> isDateRange = m => m.ModelType.Name == "DateRange";//typeof(DateRange) || m.TemplateHint ==  MVC.Shared.Views.EditorTemplates.DateTimeRange;   
}
@helper KoIfDateRange(string s)
{
    const string ifBase = "if(self.{0}{1} && self.{0}{1}() && self.{0}{1}()!==''){{filters.push(\"{0} {2} {3}\"+ self.{0}{1}() + \"{4}\");}}";
    const string surround = "'";
    var prefix = "datetime" + surround;
    @Html.Raw(string.Format(ifBase, s, ".StartDate", "ge", prefix, surround) + Environment.NewLine)
    @Html.Raw(string.Format(ifBase, s, ".EndDate", "lt", prefix, surround) + Environment.NewLine)
}
 @foreach (var p in shownOrderedProperties)
            {
            @: self['@p.PropertyName'] = ko.observable();
             }
self.filter = ko.computed(function () {
                var filter = '';
                var filters = [];
                var addFilter = '&$filter=';
                                                            @* ReSharper disable UnusedLocals *@
                var buildFilter = function (name,operator, prefix, surround) {
                                                            @* ReSharper restore UnusedLocals *@
                    if (self[name] && self[name]()) {
                    
                        var newFilter = name + ' ' + operator + ' ';
                        if (self[name]() === -1 || self[name]()==="-1") {
                            if (operator !== "eq")
                                console.warn('null comparison on != eq');
                            newFilter+= 'null';
                        } else {
                            newFilter+=prefix + surround + self[name]() + surround;
                        }
                    
                        filters.push(newFilter);
                    }
                };
                @foreach (var p in shownOrderedProperties)
                {
                    var n = p.PropertyName;
                @: if(window.filterOverride && window.filterOverride.@n){
                                                                                        @: window.filterOverride.@(n)(self,filters,buildFilter);
                                                                    @: } else {
                                                        if (isDateRange(p))
                                                        {// @: is needed for indentation preservation
            @: @(KoIfDateRange(n))
                    }
                                                        else
                                                        {// @: is needed for indentation preservation
                    @: buildFilter('@(n)','eq','@(p.ModelType == typeof(DateTime) || p.ModelType == typeof(DateTime?) ? "datetime" : string.Empty)' ,"@Html.Raw(p.ModelType.IsValueType ? string.Empty : "'")");                                                
                                                                                     }
                 @:}
            }
                if (filters.length > 0)
                    filter = addFilter + filters.join(" and ");
                return filter;
});
